class DisloyalDemon : Demon replaces Demon {
	int lastTime;

	Default {
		Health 150;
		PainChance 180;
		Speed 10;
		Radius 30;
		Height 56;
		Mass 400;
		Monster;
		+FLOORCLIP;
		SeeSound "demon/sight";
		AttackSound "demon/melee";
		PainSound "demon/pain";
		DeathSound "demon/death";
		ActiveSound "demon/active";
		Obituary "$OB_DEMONHIT"; // "%o was bit by a demon."
	}

	States {
		Spawn:
			TNT1 A 0 ChimpoutPrep;
			SARG AB 10 A_Look;
			Loop;
		See:
			SARG AABBCCDD 2 Fast A_Chase;
			TNT1 A 0 ConsiderChimpingOut;
			Loop;
		Melee:
			SARG EF 8 Fast A_FaceTarget;
			SARG G 8 Fast A_SargAttack;
			Goto See;
		Pain:
			SARG H 2 Fast;
			SARG H 2 Fast A_Pain;
			Goto See;
		Death:
			SARG I 8;
			SARG J 8 A_Scream;
			SARG K 4;
			SARG L 4 A_NoBlocking;
			SARG M 4;
			SARG N -1;
			Stop;
		Raise:
			SARG N 5;
			SARG MLKJI 5;
			Goto See;
	}

	void ChimpoutPrep() {
		lastTime = 0;
	}

	void ConsiderChimpingOut() {
		int curTime = level.time;
		if (lastTime > curTime) {
			return;
		}

		lastTime = curTime + 32;

		if (random(1,10) == 1) {
			Chimpout();
		}
	}

	void Chimpout() {
		BlockThingsIterator iter = BlockThingsIterator.Create(self, 100);
		Actor closest;
		double closestDistance;


		while (iter.Next()) {
			Actor candidate = iter.thing;
			if (candidate == self) {
				continue;
			}

			if (!candidate.bIsMonster) {
				continue;
			}

			if (!closestDistance) {
				closestDistance = self.Distance3D(candidate);
				closest = candidate;
				continue;
			}

			double candidateDistance = self.Distance3D(candidate);

			if (candidateDistance < closestDistance) {
				closestDistance = candidateDistance;
				closest = candidate;
			}
		}

		if (closest) {
			self.target = closest;
		}
	}
}